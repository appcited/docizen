---
import { getCollection, render } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { assertNotNull } from "../utils/assertNotNull";
import type { Item, ItemId } from "../components/Item";
import { getConfig } from "../config";
import { relative, parse, resolve } from "path";

const config = await getConfig();

export async function getStaticPaths() {
  const entries = await getCollection("root");
  return entries.map((entry) => ({
    params: { id: entry.id },
    props: { entry },
  }));
}

function toPartialEntries({ filePath, slug }: { filePath: string; slug: string }) {
  const filePathParts = filePath.split("/");
  const slugParts = slug.split("/");
  return filePathParts.map((_, index) => ({
    path: filePathParts.slice(0, index + 1).join("/"),
    slug: slugParts.slice(0, index + 1).join("/"),
    isFile: index === filePathParts.length - 1,
  }));
}

const entries = (await getCollection("root")).sort((a, b) =>
  a.filePath!.localeCompare(b.filePath!),
);

const items = entries
  .map((entry) => {
    const filePath = assertNotNull(entry.filePath);
    const absoluteEntryPath = resolve(config._docizenRoot, filePath);
    const relativeEntryPath = relative(config._userRoot, absoluteEntryPath).replace(/\\/g, "/");
    return {
      filePath: relativeEntryPath,
      slug: entry.id,
    };
  })
  .flatMap(toPartialEntries)
  .reduce((items, partial) => {
    // create items for all files and partial directories
    const parsedPath = parse(partial.path);
    const isIndexFile = /index/i.test(`${parsedPath.name}`);
    const id = partial.slug;
    items[id] = {
      id,
      parentId: parse(partial.slug).dir || undefined,
      name: !isIndexFile ? parsedPath.name : parse(parsedPath.dir).name,
      href: partial.isFile ? `/${partial.slug}` : items?.[id]?.href,
      path: partial.isFile ? partial.path : items?.[id]?.path,
    };
    return items;
  }, {} as Record<ItemId, Item>);

// link children to parents
Object.values(items).forEach((item) => {
  if (item.parentId) {
    items[item.parentId].children = items[item.parentId].children || [];
    items[item.parentId].children!.push(item);
  }
});

const { entry } = Astro.props;
const { Content } = await render(entry);

const currentItem = items[entry.id];
---

<Layout
  pageName={config.name}
  pageIconPath={config.icon}
  pageLinks={config.links}
  {items}
  {currentItem}
>
  <h1>{currentItem.name}</h1>
  <Content />
</Layout>
